//Type Bool
Bool : Type
Bool.true : Bool
Bool.false : Bool

// Basic Exercises involving Nats
//Type Natural
Nat : Type
Nat.zero : Nat
Nat.succ (pred: Nat) : Nat

// Increment
// 2 + 1 = 3
// 0 + 1 = 1
Nat.inc (a: Nat)     : Nat
Nat.inc Nat.zero     = Nat.succ Nat.zero
Nat.inc (Nat.succ a) = Nat.succ (Nat.succ a)

// Decrement
// 2 - 1 = 1
// 0 - 1 = 0
Nat.dec (a: Nat)     : Nat
Nat.dec Nat.zero     = Nat.zero
Nat.dec (Nat.succ a) = a

Nat.is_zero (a: Nat)     : Bool
Nat.is_zero Nat.zero     = Bool.true
Nat.is_zero (Nat.succ a) = Bool.false

Main {
    let a = Nat.zero
    let b = (Nat.succ (Nat.succ Nat.zero))
    Nat.dec b
}