Bool       : Type
Bool.true  : Bool
Bool.false : Bool

Bool.eql (a: Bool) (b: Bool)   : Bool
Bool.eql Bool.true  Bool.true  = Bool.true
Bool.eql Bool.false Bool.false = Bool.true
Bool.eql a          b          = Bool.false

Bool.if <r: Type> (b: Bool) (if_t: r) (if_f: r) : r
Bool.if r Bool.true  if_t if_f = if_t
Bool.if r Bool.false if_t if_f = if_f


// type MaybeBool
// It maybe holds a Boolean inside it
MaybeBool                    : Type
MaybeBool.none               : MaybeBool
MaybeBool.some (value: Bool) : MaybeBool

 // Returns true if Maybe is none
 MaybeBool.is_none (a: MaybeBool) : Bool
 MaybeBool.is_none MaybeBool.none = Bool.true
 MaybeBool.is_none a              = Bool.false

 // Returns true if Maybe is some
 MaybeBool.is_some (a: MaybeBool) : Bool
 MaybeBool.is_some MaybeBool.none = Bool.false
 MaybeBool.is_some a              = Bool.true

 // Returns true if both inputs are identical
// eql(MaybeBool.none,             MaybeBool.none            ) -> true
// eql(MaybeBool.some(Bool.false), MaybeBool.none            ) -> false
// eql(MaybeBool.some(Bool.true),  MaybeBool.some(Bool.false)) -> false
// eql(MaybeBool.some(Bool.false), MaybeBool.some(Bool.false)) -> true
MaybeBool.eql (a: MaybeBool) (b: MaybeBool)         : Bool
MaybeBool.eql MaybeBool.none     MaybeBool.none     = Bool.true
MaybeBool.eql MaybeBool.none     (MaybeBool.some b) = Bool.false
MaybeBool.eql (MaybeBool.some a) MaybeBool.none     = Bool.false
MaybeBool.eql (MaybeBool.some a) (MaybeBool.some b) = (Bool.eql a b)

// Returns the value inside the MaybeBool.
// If there is no value contained, returns v instead
MaybeBool.extract (a: MaybeBool) (v: Bool) : Bool
MaybeBool.extract MaybeBool.none     v     = v
MaybeBool.extract (MaybeBool.some a) v     = a

// Create a MaybeBool from a Boolean
// create(Bool.false) -> MaybeBool(Bool.false)
MaybeBool.create (a: Bool) : MaybeBool
MaybeBool.create a = (MaybeBool.some a)

MaybeBool.or (a: MaybeBool) (b: MaybeBool) : MaybeBool
MaybeBool.or MaybeBool.none  b             = b
MaybeBool.or a               b             = a

Main {
  let a = (MaybeBool.none)
  let b = (MaybeBool.some(Bool.true))
  let c = Bool.false
  (MaybeBool.extract a c)
  //(MaybeBool.create c)    
}