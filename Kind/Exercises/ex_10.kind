//Char and String

// Charactere Type
// Alias for U16
Char: Type
  U16


//Syntax Sugar for U16
  //0#16, 1#16, 2#16 ...


//Syntax Sugar for Char
  //'0', '1', '2' ... 

//Ascii Table from Wikipedia:
// https://upload.wikimedia.org/wikipedia/commons/1/1b/ASCII-Table-wide.svg

//  _________________________________________
// | U16 Syntax Sugar   | Char Syntax Sugar  |  
// |--------------------|--------------------|
// |     72#16          |      'H'           |
// |    101#16          |      'e'           |
// |    121#16          |      'y'           |
//  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

//Verifies if the character is Upper Case

//is_upper('a') -> Bool.false
//is_upper('A') -> Bool.true
//is_upper('0') -> Bool.false
is_upper(x: Char): Bool
  case U16.gte(x, 'A') {
    false: Bool.false
    true:  U16.lte(x, 'Z')
  }


//Verifies if the character is Lower Case

//is_lower('a') -> Bool.true
//is_lower('A') -> Bool.false
//is_lower('0') -> Bool.false
is_lower(x: Char): Bool
  case U16.gte(x, 'a') {
    false: Bool.false 
    true: U16.lte(x, 'z')
  }


//Verifies if the character is a Number-Digit Value

//is_digit('a') -> Bool.false
//is_digit('A') -> Bool.false
//is_digit('0') -> Bool.true
is_digit(x: Char): Bool
  case U16.gte(x, '0') {
    false: Bool.false 
    true: U16.lte(x, '9')
  }


//Verifies if both of the Characters are the same

//is_equal('a', 'A') -> Bool.false
//is_equal('A', '0') -> Bool.false
//is_equal('0', '0') -> Bool.true
equal(x: Char, y: Char): Bool
  U16.eql(x, y)


//Transforms Characters into Nat digits

//to_digit('0') -> Nat.zero
//to_digit('1') -> Nat.succ(Nat.zero)
//to_digit('4') -> 4
to_digit(x: Char): Nat
  case is_digit(x) {
    false: Nat.zero
    true: Nat.sub(U16.to_nat(x), 48)
  }


//Transforms all Characters into Lower Case Characters

//to_lower('A') -> 'a'
//to_lower('B') -> 'b'
//to_lower('Z') -> 'z'
to_lower(x: Char): Char
  case is_upper(x) {
    false: x
    true: U16.add(x, 32)
  }


//Transforms all Characters into Upper Case Characters

//to_upper('a') -> 'A' 
//to_upper('b') -> 'B'
//to_upper('z') -> 'Z'
to_upper(x: Char): Char
  case is_lower(x) {
    false: x
    true: U16.sub(x, 32)
  }


//String Type
type String { 
  nil,
  cons(head: Char, tail: String)
}

//Without Syntax Sugar for String
//a = String.cons('H', String.cons('I', String.nil))
//b = String.cons('H', String.cons('e', String.cons('l', String.cons('l', String.cons('o', String.nil)))))
//c = String.cons('t', String.cons('e', String.cons('x', String.cons('t', String.nil))))

//Syntax Sugar for String
//a = "HI"
//b = "Hello"
//c = "text"



//Concatenates two Strings into one

//concat(a,b) -> "HiHello"
//concat(b,c) -> "Hellotext"
concat(xs: String, ys: String): String
  case xs {
    nil: case ys {
      nil: String.nil
      cons: ys
    }
    cons: String.cons(xs.head, concat(xs.tail, ys))
  }
  // case xs {
  //   nil: ys
  //   cons: String.cons(xs.head, concat(xs.tail, ys))
  // }


//Applies a Function to all Characters of the String

//map(to_lower, a) -> "hi"
map(fn: Char -> Char, xs: String): String
  case xs {
    nil: String.nil
    cons: String.cons(fn(xs.head), map(fn, xs.tail))
  }


//Converts all Lower Case Caracters in a String to Upper Case

//string_to_upper(c) -> "TEXT"
string_to_upper(xs: String): String
  case xs {
    nil: String.nil
    cons: case is_upper(xs.head) {
      false: String.cons(to_upper(xs.head), string_to_upper(xs.tail))
      true: String.cons(xs.head, string_to_upper(xs.tail))
    }
  }


//Convers the String into bits

//to_bits(a) -> "0000000001001001 0000000001001000"
//to_bits(b) -> "0000000001101111 0000000001101100 00000000011011000 000000001100101 0000000001001000"
//to_bits(c) -> "0000000001110100 0000000001111000 00000000011001010 000000001110100"
to_bits(xs: String): Bits
  case xs {
    nil: Bits.e
    cons: Bits.concat(U16.to_bits(xs.head), to_bits(xs.tail))
  }


//Verifies if two Strings are Equal

//stringequal(a, a) -> Bool.true
//stringequal(a, b) -> Bool.false
//stringequal(b, c) -> Bool.false
stringequal(xs: String, ys: String): Bool
  case xs ys {
    cons cons: case equal(xs.head, ys.head) {
      false: Bool.false
      true: case xs.tail ys.tail {
        nil nil: Bool.true
        cons cons: stringequal(xs.tail, ys.tail)
      } default Bool.false
    }
  } default Bool.false


//Verifies if All String elements are Numbers

//is_nat(a)      -> Bool.false
//is_nat(b)      -> Bool.false
//is_nat("1234") -> Bool.true
is_nat(xs: String): Bool
  case xs {
    nil: Bool.false
    cons: case is_digit(xs.head) {
      true: case xs.tail {
        nil: Bool.true
        cons: is_nat(xs.tail)
      }
      false: Bool.false
    }
  }   
 

// Takes any elements while the condition is matched.

//take_while(is_upper,    a) -> "HI"
//take_while(is_lower,    b) -> ""
//take_while(is_equal('t'), c) -> "t"
take_while(cond: Char -> Bool, xs: String): String
  case xs {
    nil:  String.nil
    cons: 
       let takecond = cond(xs.head)
       case takecond {
         false: String.nil
         true: String.cons(xs.head, take_while(cond, xs.tail))
       }
  }



//Finds the index of the head for the first occurence if any of the Characters are equal

//find(a, "H") -> Maybe.some(0)
//find(b, "l") -> Maybe.some(2)
//find(c, "z") -> Maybe.none

find(xs: String, x: Char): Maybe<Nat>
  find_go(xs, x, Nat.zero)


find_go(xs: String, x: Char, nro: Nat): Maybe<Nat>
   case xs {
     nil: Maybe.none<Nat>
     cons: case equal(xs.head, x){
       true: Maybe.some<Nat>(nro)
       false: find_go(xs.tail, x, Nat.succ(nro))
     }
   }


//Acha quantas x aparece o caracter -- Fiz assim pq achei q era isso o find, mas depois vi que era o index e nao quantas x aparecia
findrepeat(xs: String, x: Char): Maybe<Nat>
  case xs {
    nil: Maybe.none<Nat>
    cons: case equal(xs.head, x){
      true:  Maybe.some<Nat>(Nat.add(Nat.succ(Nat.zero), findaux(findrepeat(xs.tail, x))))
      false: findrepeat(xs.tail, x)
    }
  }

findaux(x: Maybe<Nat>): Nat
  case x {
    none: Nat.zero
    some: x.value
  }

//filter(is_upper,      a) -> "HI"
//filter(is_lower,      b) -> "ello"
//filter(is_equal('t'), c) -> "tt"
filter(cond: Char -> Bool, xs: String): String
  case xs {
    nil: String.nil
    cons: 
      let condbool = cond(xs.head)
      case condbool {
        false: filter(cond, xs.tail)
        true:  String.cons(xs.head, filter(cond, xs.tail))
      }
  }


//Concatenates all elements of a List of Strings

//flatten([a,b,c]) -> "HIHellotext"
flatten(lxs: List<String>): String
  case lxs {
    nil:  String.nil
    cons: case lxs.tail {
      nil: lxs.head
      cons: flatten(List.cons<String>(concat(lxs.head, lxs.tail.head), lxs.tail.tail))
    }
  }


//Drops a n Number of characteres from a String

//drop(1, a) -> "I"
//drop(2, b) -> "llo"
//drop(3, c) -> "t"
drop(n: Nat, xs: String): String
  case n{
    zero: xs
    succ: case xs {
      nil: String.nil
      cons: drop(n.pred, xs.tail)
    }
  }


//Takes n elements of a String

//take(1, a) ->  "H"
//take(2, b) ->  "He"
//take(3, c) ->  "tex"
take(n: Nat xs: String): String
  case n {
    zero: String.nil
    succ: case xs {
      nil: String.nil
      cons: String.cons(xs.head, take(n.pred, xs.tail))
    }
  }


//Takes a x part of the string after a n Index of values get dropped
//a = "HI"
//b = "Hello"
//c = "text"
//slice(1, 2, a) -> "I"
//slice(2, 4, b) -> "ll"
//slice(1, 3, c) -> "ex"
slice(n: Nat, x: Nat, xs: String): String
  case xs {
    nil: String.nil
    cons: case drop(n, xs){
      nil: String.nil
      cons: take(Nat.sub(Nat.succ(x), n), drop(n, xs))
    }
  }

// Final Boss
// Sem comentarios essa função
// Usando o modo robas pra sair disso

// Divides the elements of a String into a list, using a match you decide

//split(b, "l")                                   -> ["He","" , "o"
//split("Split example with matching space", " ") -> ["Split,example,with,matching,space]
//split("You are awesome!", " ")                  -> ["You","are","awesome!"]
split(xs: String, match: String): List<String>
  split_go(xs, match, String.nil)

split_go(xs: String, match: String, acum: String): List<String>
  case xs {
    nil: List.cons<String>(acum, List.nil<String>)
    cons: case split_go_achaomath(xs, match){
      true:  
        let sobra = drop(length_string(match, Nat.zero), xs)
        List.cons<String>(acum, split_go(sobra, match, String.nil))
      false: 
        let gravaohead = String.cons(xs.head, String.nil)
        split_go(xs.tail, match, concat(acum, gravaohead))
    }
  }

split_go_achaomath(xs: String, match: String): Bool
   case match {
     nil: Bool.true
     cons: case xs {
       nil: Bool.false
       cons: case equal(xs.head, match.head) {
         true: split_go_achaomath(xs.tail, match.tail)
         false: Bool.false
       }
     }
   }

length_string(xs: String, n: Nat): Nat
  case xs {
    nil: Nat.zero
    cons: length_string(xs.tail, Nat.succ(n))
  }

ex_10: IO<Unit>
  IO {
    Tests._10.is_upper(is_upper)
    Tests._10.is_lower(is_lower)
    Tests._10.is_digit(is_digit)
    Tests._10.equal(equal)
    Tests._10.to_digit(to_digit)
    Tests._10.to_lower(to_lower)
    Tests._10.to_upper(to_upper)
    Tests._10.concat(concat)
    Tests._10.drop(drop)
    Tests._10.take(take)
    Tests._10.slice(slice)
    Tests._10.filter(filter)
    Tests._10.map(map)
    Tests._10.string_to_upper(string_to_upper)
    Tests._10.to_bits(to_bits)
    Tests._10.stringequal(stringequal)
    Tests._10.is_nat(is_nat)
    Tests._10.take_while(take_while)
    Tests._10.find(find) 
    Tests._10.flatten(flatten)
  }